<Project Sdk="Microsoft.NET.Sdk">

    <Import Project="./AnotherCrabsTreasureCommon.props" />

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <AssemblyName>AnotherCrabTwitchIntegration</AssemblyName>
        <Description>Adds Twitch integration to Another Crab's Treasure</Description>
        <Version>1.0.0</Version>

        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <LangVersion>latest</LangVersion>

        <MinVerTagPrefix>v</MinVerTagPrefix>
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    </PropertyGroup>

    <!-- Embedded Resources -->
    <ItemGroup>
        <EmbeddedResource Include="Modules\WebServer\Overlay\webpage\anime.min.js" />
        <EmbeddedResource Include="Modules\WebServer\Overlay\webpage\index.html" />
    </ItemGroup>

    <ItemGroup>
        <AdditionalFiles Include="secrets.env" />
    </ItemGroup>

    <!-- Assembly References -->
    <ItemGroup>
        <Reference Include="MMHOOK_Assembly-CSharp">
            <HintPath>$(PluginGameDir)MMHOOK\MMHOOK_Assembly-CSharp.dll</HintPath>
        </Reference>
    </ItemGroup>

    <!-- Framework Assembly References -->
    <ItemGroup Condition="'$(TargetFramework.TrimEnd(`0123456789`))' == 'net'">
        <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="all"/>
    </ItemGroup>

    <!-- Project References -->
    <ItemGroup>
        <ProjectReference Include="..\Common.TwitchLibrary\Common.TwitchLibrary.csproj" />
    </ItemGroup>

    <!-- Compile-Time NuGet Packages -->
    <ItemGroup>
        <PackageReference Include="Fody" Version="6.8.1">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="Costura.Fody" Version="5.7.0">
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
        <PackageReference Include="DotEnvGenerator" Version="0.1.0"  PrivateAssets="all" />
    </ItemGroup>
    
    <!-- Package References -->
    <ItemGroup>
        <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all"/>
        <PackageReference Include="BepInEx.Core" Version="5.*"/>
        <PackageReference Include="BepInEx.PluginInfoProps" Version="1.*"/>
        <PackageReference Include="EmbedIO" Version="3.5.2" />
        <PackageReference Include="TwitchLib.Api" Version="3.9.0" IncludeAssets="all" />
        <PackageReference Include="TwitchLib.Client" Version="3.3.1" IncludeAssets="all" />
        <PackageReference Include="UnityEngine.Modules" Version="2020.3.48" IncludeAssets="compile"/>
    </ItemGroup>

    <!-- Move the plugin to the game's plugin directory -->
    <Target Condition="'$(CI)' != 'true'" Name="CopyToPluginDir" AfterTargets="PostBuildEvent">
        <!-- Create a temporary copy of the plugin in the target directory -->
        <!-- This is a workaround because if we copy it directly to the game's plugin directory, an error is thrown because the game is using the plugin -->
        <Copy SourceFiles="$(TargetDir)$(TargetFileName)" DestinationFiles="$(TargetDir)$(TargetFileName).tmp"/>
        <!-- Move the plugin temporary copy to the game's plugin directory -->
        <!-- The move command will overwrite the plugin if it already exists and no error will be thrown -->
        <!-- We can't move the original plugin because it is used by reference for Test project -->
        <Move SourceFiles="$(TargetDir)$(TargetFileName).tmp" DestinationFiles="$(PluginGameDir)$(TargetFileName)"/>
    </Target>
</Project>
