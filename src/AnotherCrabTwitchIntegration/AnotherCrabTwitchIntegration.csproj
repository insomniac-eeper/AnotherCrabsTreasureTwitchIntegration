<Project Sdk="Microsoft.NET.Sdk">

    <Import Project="./AnotherCrabsTreasureCommon.props" />

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <AssemblyName>AnotherCrabTwitchIntegration</AssemblyName>
        <Description>Adds Twitch integration to Another Crab's Treasure</Description>
        <Version>1.0.0</Version>

        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <LangVersion>latest</LangVersion>

        <!-- Number of instances of the game to start to test the plugin -->
        <NumberOfClients>1</NumberOfClients>
        <!-- Delay between each start of the game in seconds -->
        <DelayBetweenClientsInSeconds>5</DelayBetweenClientsInSeconds>
        <!-- To apply the correct delay between each instance, we need to add 1 to the delay because the first "echo" sent by the ping command is instant -->
        <PingDelay>$([MSBuild]::Add($(DelayBetweenClientsInSeconds), 1))</PingDelay>
        <!-- True to start the game when the plugin is built, false to only copy the plugin to the game's plugin directory -->
        <StartGame>false</StartGame>

        <MinVerTagPrefix>v</MinVerTagPrefix>
        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
        <UserSecretsId>e44347f8-ead1-46a6-979d-91858246bac2</UserSecretsId>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="Costura.Fody" Version="5.7.0">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="DotEnvGenerator" Version="0.1.0"  PrivateAssets="all" />
    </ItemGroup>
    <ItemGroup>
        <AdditionalFiles Include="secrets.env">
        </AdditionalFiles>
    </ItemGroup>

    <ItemGroup>
        <Reference Include="MMHOOK_Assembly-CSharp">
            <HintPath>$(PluginGameDir)MMHOOK\MMHOOK_Assembly-CSharp.dll</HintPath>
        </Reference>
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all"/>
        <PackageReference Include="BepInEx.Core" Version="5.*"/>
        <PackageReference Include="BepInEx.PluginInfoProps" Version="1.*"/>
        <PackageReference Include="EmbedIO" Version="3.5.2" />
        <PackageReference Include="Fody" Version="6.8.1">
          <PrivateAssets>all</PrivateAssets>
          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
        <PackageReference Include="TwitchLib.Api" Version="3.9.0" IncludeAssets="all" />
        <PackageReference Include="TwitchLib.Client" Version="3.3.1" IncludeAssets="all" />
        <PackageReference Include="UnityEngine.Modules" Version="2020.3.48" IncludeAssets="compile"/>

    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework.TrimEnd(`0123456789`))' == 'net'">
        <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="all"/>
    </ItemGroup>

    <ItemGroup>
      <ProjectReference Include="..\Common.TwitchLibrary\Common.TwitchLibrary.csproj" />
    </ItemGroup>

    <ItemGroup>
      <None Remove="Overlay\webpage\index.html" />
      <EmbeddedResource Include="Overlay\webpage\index.html" />
      <None Remove="Overlay\webpage\anime.js" />
      <EmbeddedResource Include="Overlay\webpage\anime.js" />
    </ItemGroup>

    <ItemGroup>
      <Folder Include="Modules\TwitchIntegration\Patches\" />
    </ItemGroup>

    <Target Name="ClearReferenceCopyLocalPaths" AfterTargets="ResolveAssemblyReferences">
        <ItemGroup>
            <!-- <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)"/> -->
        </ItemGroup>
    </Target>

    <!-- Move the plugin to the game's plugin directory and start the game to test it -->
    <Target Condition="'$(CI)' != 'true'" Name="CopyToPluginDir" AfterTargets="PostBuildEvent">
        <!-- Create a temporary copy of the plugin in the target directory -->
        <!-- This is a workaround because if we copy it directly to the game's plugin directory, an error is thrown because the game is using the plugin -->
        <Copy SourceFiles="$(TargetDir)$(TargetFileName)" DestinationFiles="$(TargetDir)$(TargetFileName).tmp"/>
        <!-- Copy Common.TwitchLibrary.dll from the project output directory to the game's plugin directory -->
        <!-- <Copy SourceFiles="$(OutputPath)Common.TwitchLibrary.dll" DestinationFiles="$(PluginGameDir)Common.TwitchLibrary.dll"/> -->

        <!-- <Copy SourceFiles="Overlay/webpage/index.html" DestinationFiles="$(PluginGameDir)Overlay/webpage/index.html"/> -->
        <!-- Move the plugin temporary copy to the game's plugin directory -->
        <!-- The move command will overwrite the plugin if it already exists and no error will be thrown -->
        <!-- We can't move the original plugin because it is used by reference for Test project -->
        <Move SourceFiles="$(TargetDir)$(TargetFileName).tmp" DestinationFiles="$(PluginGameDir)$(TargetFileName)"/>
        <!-- Kill every instance of the game, ignore errors if none are running -->
        <!-- <Exec Command='taskkill /F /IM "$(GameExe)" /T || exit 0'/> -->
        <!-- Start new instances of the game as many times as specified in NumberOfClients -->
        <!-- The ping command is used to apply a delay between each instance, otherwise only one BepInEx debug terminal would be opened -->
        <!-- Use ping command is a workaround because Windows doesn't have a sleep command -->
        <!-- <Exec Command='for /L %%i in (1,1,$(NumberOfClients)) do (start "" "$(GameExePath)" &amp; if %%i lss $(NumberOfClients) (ping 127.0.0.1 -n $(PingDelay) > nul))'/> -->
    </Target>
</Project>
